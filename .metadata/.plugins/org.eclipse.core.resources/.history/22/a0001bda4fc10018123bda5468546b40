package Fibonacci;

public class Fib {
	public static void main(String[] args){
		long t0 = System.nanoTime();
		
		int N = 30;
		
		long t1 = System.nanoTime();
		
		int N1 = fib_recursive(N);
		
		long t2 = System.nanoTime();
		
		int N2 = fib_memoization(N);
		
		long t3 = System.nanoTime();
		
		int N3 = fib_tabulation(N);
		
		long t4 = System.nanoTime();
		
		System.out.println("Initialization	: " + (t1-t0)/1000 + "micro s. N = " + N);
		System.out.println("Fib recursive	: " + (t2-t1)/1000 + "micro s. N1 =" + N1);
		System.out.println("Fib memoization	: " + (t3-t2)/1000 + "micro s. N2 =" + N2);
		System.out.println("Fib tabulation	: " + (t4-t3)/1000 + "micro s. N3 =" + N3);
	}
	
	public static int fib_recursive(int n){
		if(n == 1)
			return 0;
		
		if(n == 2)
			return 1;
		
		return fib_recursive(n-1) + fib_recursive(n-2);
	}
	
	public static int fib_memoization(int n){
		if(n == 1)
			return 0;
		
		if(n == 2)
			return 1;
		
		int[] fibs = new int[n];
		for(int i = 2; i < n; i++)
			fibs[i] = -1;
		
		if(fibs[n-1] == -1){
			fibs[n-1] = fib_memoization(n-1) + fib_memoization(n-2);
		}
		
		return fibs[n-1];		
	}
	
	public static int fib_tabulation(int n){
		if(n == 1)
			return 0;
		
		if(n == 2)
			return 1;
		
		int[] fibs = new int[n];
		fibs[0] = 0;
		fibs[1] = 1;
		
		for(int i = 2; i < n; i++){
			fibs[i] = fibs[i-1] + fibs[i-2];
		}
		
		return fibs[n-1];		
	}
}
