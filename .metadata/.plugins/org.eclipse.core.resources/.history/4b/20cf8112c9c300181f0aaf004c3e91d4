package DFS;

public class graph_dfs {

	public static void main(String[] args) {
		int V = 5;
		int E[] = {1, 2, 1, 3, 2, 4, 2, 5};
		
		graph g = new graph(V, E);
		g.dfs_recursive(0);

	}

}

class graph{
	int V;
	//int[] search_order;
	int[][] V_nbrs;
	boolean[] visited;
	public graph(int V, int[] E){
		this.V = V;
		//search_order = new int[V];
		V_nbrs = new int[V][];
		visited = new boolean[V];
		for(int i = 0; i < V; i++){
			visited[i] = false;
			int Vi = count(E, i+1);
			V_nbrs[i] = new int[Vi];
			int V_idx = 0;
			for(int j = 0; j < E.length-1; j+=2){
				if(E[j] == i+1){
					V_nbrs[i][V_idx] = E[j+1]-1;
					V_idx++;
				}
				if(E[j+1] == i+1){
					V_nbrs[i][V_idx] = E[j]-1;
					V_idx++;
				}
			}
		}
		
	}
	
	public int count(int[] E, int Vnum){
		int ret = 0;
		for(int i = 0; i < E.length; i++){
			if(E[i] == Vnum)
				ret++;
		}
		return ret;
	}
	
	public void dfs_recursive(int idx){
		System.out.print(idx+1 + " ");
		visited[idx] = true;
		for(int i = 0; i < V_nbrs[idx].length; i++){
			if(!visited[V_nbrs[idx][i]]){
				dfs_recursive(V_nbrs[idx][i]);
			}
		}
	}
}
